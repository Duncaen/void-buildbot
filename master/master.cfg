# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

from .xbps_bulk import XbpsBulkFactory

try:
    import secrets
except:
    print("master/secrets.py not found, see master/secrets.py.def")
    raise

git_void_packages = 'git://github.com/voidlinux/void-packages.git'

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
        worker.Worker("worker1", "1234")]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        git_void_packages,
        workdir='void-packages-workdir', branch='master',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["void-x86_64", "void-x86_64-musl"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["void-x86_64", "void-x86_64-musl"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

xbps_bulk = XbpsBulkFactory()

c['builders'] = [
    util.BuilderConfig(
        name="void-x86_64",
        workernames=["worker1"],
        factory=xbps_bulk,
        properties=dict(
            hostdir="hostdir",
            masterdir="masterdir",
            bootstraparch="x86_64",
            targetarch="x86_64",
            )),
    util.BuilderConfig(
        name="void-x86_64-musl",
        workernames=["worker1"],
        factory=xbps_bulk,
        properties=dict(
            hostdir="hostdir-musl",
            masterdir="masterdir-musl",
            bootstraparch="x86_64-musl",
            targetarch="x86_64-musl",
            )),
    ]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Void Linux"
c['titleURL'] = "http://www.voidlinux.eu/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in 
# the 'www' entry below, but with an externally-visible host name which the 
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(
                    waterfall_view={}, console_view={}))

authz = util.Authz(
        allowRules=[
            util.StopBuildEndpointMatcher(role="admins"),
            util.ForceBuildEndpointMatcher(role="admins"),
            util.RebuildBuildEndpointMatcher(role="admins")
            ],
        roleMatchers=[
            util.RolesFromEmails(admins=secrets.admins)
            ]
        )

auth=util.UserPasswordAuth(secrets.users)
c['www']['auth'] = auth
c['www']['authz'] = authz


####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

